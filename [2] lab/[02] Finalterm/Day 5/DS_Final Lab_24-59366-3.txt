#include <iostream>
using namespace std;


const int maxSize = 5;
static int queueArray[maxSize];
int front = -1, rear = -1;

bool isEmpty()  {
    return (front == -1 && rear == -1);
}

bool isFull()   {
    return (((rear + 1) % maxSize) == front);
}

bool enQueue(int value) {
    if (isFull()) {
        cout << "Queue overflowed!" << endl;
        return false;
    }
    if (isEmpty()) {
        front = rear = 0;
    }
    else {
        rear = (rear + 1) % maxSize;
    }
    queueArray[rear] = value;
    cout << "Insertion " << value << " successful!" << endl;
    return true;
}


bool deQueue() {
    if (isEmpty()) {
        cout << "Queue is underflowed!" << endl;
        return false;
    }
    int store = queueArray[front];
    if (front == rear) {
        front = rear = -1;
    }
    else {
        front = (front + 1) % maxSize;
    }
    cout << "Dequeued " << store << " successfully" << endl;
    return true;
}


void showQueue() {
    if (isEmpty()) {
        cout << "Queue is underflowed, nothing to show!" << endl;
        return;
    }

    cout << "Showing queue (left to right): ";

    for (int i = front; ; i = (i + 1) % maxSize) {
        cout << queueArray[i] << " ";

        if (i == rear) {
            break;
        }
    }

    cout << endl;
}


int operationMenu()    {
    int option;
    cout << "[1] Enqueue customer in the queue" << endl;
    cout << "[2] Dequeue customer in the queue (after payment)" << endl;
    cout << "[3] Display the customer queue" << endl;
    cout << "[4] Exit" << endl;
    cout << "Enter your choice: ";
    cin >> option;
    if (option >=1 && option <=4)   {
        return option;
    }
    else {
        return 0;
    }
}

int main()  {
    cout << "According to the problem, we can understand that it is an implementation of circular queue, and it is assumed that people standing in a queue is limited to 5." << endl << endl;
    int option = 0;
    int insertedValue;

    while(option != 4)  {
        option = operationMenu();

        switch(option)  {
            case 1:
                cout << "Enter your value: ";
                cin >> insertedValue;
                enQueue(insertedValue);
                break;
            case 2:
                deQueue();
                break;
            case 3:
                showQueue();
                break;
            case 4:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
                break;
        }
    }
    return 0;
}
